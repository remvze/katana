services:
  redis:
    image: redis:latest
    container_name: katana-redis
    restart: always
    command: ['redis-server', '--appendonly', 'yes']
    networks:
      - katana-network

  cron:
    build:
      context: ./cron
      args:
        TARGET_URL: 'http://katana:4321'
    container_name: katana-cron
    restart: always
    environment:
      TARGET_URL: 'http://katana:4321/api/expire'
    depends_on:
      - katana
    networks:
      - katana-network

  katana:
    build:
      context: .
      args:
        PUBLIC_TURNSTILE_SITE_KEY: ${PUBLIC_TURNSTILE_SITE_KEY}
        TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY}
        PUBLIC_UNSHORTENER_LINK: ${PUBLIC_UNSHORTENER_LINK}
        REDIS_URL: 'redis://redis:6379'
        DATABASE_URL: 'postgresql://postgres:postgres@postgres:5432/katanadb'
    container_name: katana-app
    restart: always
    environment:
      PUBLIC_TURNSTILE_SITE_KEY: ${PUBLIC_TURNSTILE_SITE_KEY}
      TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY}
      PUBLIC_UNSHORTENER_LINK: ${PUBLIC_UNSHORTENER_LINK}
      REDIS_URL: 'redis://redis:6379'
      DATABASE_URL: 'postgresql://postgres:postgres@postgres:5432/katanadb'
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - katana-network
    entrypoint: sh -c "npm run db:migrate && npm run start"

  postgres:
    image: postgres:latest
    container_name: katana-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: katanadb
    networks:
      - katana-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - 127.0.0.1:3000:3000
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - katana
    networks:
      - katana-network

networks:
  katana-network:
    driver: bridge
