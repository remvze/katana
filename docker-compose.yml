services:
  redis:
    image: redis:latest
    container_name: katana-redis
    restart: always
    ports:
      - '6379:6379'
    command: ['redis-server', '--appendonly', 'yes']
    networks:
      - katana-network

  katana:
    image: ghcr.io/remvze/katana
    restart: always
    deploy:
      replicas: 3
    environment:
      PUBLIC_TURNSTILE_SITE_KEY: ${PUBLIC_TURNSTILE_SITE_KEY}
      TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY}
      PUBLIC_UNSHORTENER_LINK: ${PUBLIC_UNSHORTENER_LINK}
      REDIS_URL: ${REDIS_URL}
      HOST: 0.0.0.0
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - katana-network
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    command: sh -c "npm run migrate:up && npm run start"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4321']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - 127.0.0.1:3000:3000
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - katana
    networks:
      - katana-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 30 --label-enable --rolling-restart
    restart: unless-stopped
    networks:
      - katana-network

networks:
  katana-network:
    driver: bridge
